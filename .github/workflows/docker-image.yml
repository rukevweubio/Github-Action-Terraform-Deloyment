name: Build, Push Docker Image & Ansible Deploy hello

on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE: web-application
  DOCKER_REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker image
        working-directory: ./app
        run: |
          docker build -t $DOCKER_IMAGE:latest .

      - name: Tag Docker image for Docker Hub
        run: |
          docker tag $DOCKER_IMAGE:latest $DOCKER_USERNAME/$DOCKER_IMAGE:latest

      - name: Push image to Docker Hub
        run: |
          docker push $DOCKER_USERNAME/$DOCKER_IMAGE:latest

      - name: Tag Docker image for GHCR
        run: |
          docker tag $DOCKER_IMAGE:latest ghcr.io/${{ github.repository_owner }}/$DOCKER_IMAGE:latest

      - name: Push image to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/$DOCKER_IMAGE:latest

  deploy-terraform:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
    outputs:
      public_ip: ${{ steps.tf_output.outputs.public_ip }}
      private_key: ${{ steps.output_private_key.outputs.private_key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Get EC2 Public IP
        id: tf_output
        working-directory: ./terraform
        run: |
          echo "public_ip=$(terraform output -raw ec2_public_ip)" >> "$GITHUB_OUTPUT"

      - name: Terraform Output Private Key
        id: output_private_key
        working-directory: ./terraform
        run: echo "private_key=$(terraform output -raw private_key_pem)" >> "$GITHUB_OUTPUT"

  ansible_deploy:
    runs-on: ubuntu-latest
    needs: deploy-terraform
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Ansible and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass
          pip install boto3

      - name: Create SSH Key Directory
        run: |
          mkdir -p ~/.ssh
          echo "${{ needs.deploy-terraform.outputs.private_key }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add SSH Key to Known Hosts
        run: |
          ssh-keyscan -H ${{ needs.deploy-terraform.outputs.public_ip }} >> ~/.ssh/known_hosts
          echo "StrictHostKeyChecking no" >> ~/.ssh/config  

      - name: Sleep for 30 seconds (instance warmup)
        run: sleep 30

      - name: Create Inventory
        env:
          EC2_PUBLIC_IP: ${{ needs.deploy-terraform.outputs.public_ip }}
        run: |
          echo "[web]" > inventory
          echo "$EC2_PUBLIC_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory

      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory ./ansible/playbook.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
